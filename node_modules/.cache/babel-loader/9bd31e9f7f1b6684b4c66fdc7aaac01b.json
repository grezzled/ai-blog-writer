{"ast":null,"code":"import { Configuration, OpenAIApi } from \"openai\";\n\nasync function validateApiKey(apiKey) {\n  const configuration = new Configuration({\n    apiKey: apiKey\n  });\n  const openai = new OpenAIApi(configuration);\n\n  try {\n    const completion = await openai.createCompletion({\n      model: \"text-davinci-002\"\n    });\n    console.log(\"result\" + completion.data.choices[0].text);\n  } catch (error) {\n    console.log('False');\n    return false;\n  }\n\n  return true;\n}\n\nasync function generateTitles(apiKey, keywords) {\n  const configuration = new Configuration({\n    apiKey: apiKey\n  });\n  const openai = new OpenAIApi(configuration);\n\n  try {\n    const completion = await openai.createCompletion({\n      model: \"text-davinci-002\",\n      prompt: \"Generate blog topics on: {}\" + keywords\n    });\n    return completion.data.choices[0].text;\n  } catch (error) {\n    if (error.response) {\n      console.error(error.response.status);\n      console.error(error.response.data);\n    } else {\n      console.error(error);\n    }\n\n    return false;\n  }\n}\n\nexport { validateApiKey, generateTitles };","map":{"version":3,"names":["Configuration","OpenAIApi","validateApiKey","apiKey","configuration","openai","completion","createCompletion","model","console","log","data","choices","text","error","generateTitles","keywords","prompt","response","status"],"sources":["/Users/grezzled/Desktop/grezz-ai-writer/app/src/openAi/apiGateway.js"],"sourcesContent":["import { Configuration, OpenAIApi } from \"openai\"\n\n\nasync function validateApiKey(apiKey) {\n\n    const configuration = new Configuration({\n        apiKey: apiKey,\n    });\n    const openai = new OpenAIApi(configuration);\n\n    try {\n        const completion = await openai.createCompletion({\n            model: \"text-davinci-002\",\n        });\n        console.log(\"result\" + completion.data.choices[0].text)\n    } catch (error) {\n        console.log('False')\n        return false;\n    }\n    return true\n}\n\nasync function generateTitles(apiKey, keywords) {\n    const configuration = new Configuration({\n        apiKey: apiKey,\n    });\n    const openai = new OpenAIApi(configuration);\n\n    try {\n        const completion = await openai.createCompletion({\n            model: \"text-davinci-002\",\n            prompt: \"Generate blog topics on: {}\" + keywords,\n        });\n        return completion.data.choices[0].text\n    } catch (error) {\n        if (error.response) {\n            console.error(error.response.status);\n            console.error(error.response.data);\n        } else {\n            console.error(error)\n        }\n        return false\n    }\n}\n\nexport { validateApiKey, generateTitles }"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,SAAxB,QAAyC,QAAzC;;AAGA,eAAeC,cAAf,CAA8BC,MAA9B,EAAsC;EAElC,MAAMC,aAAa,GAAG,IAAIJ,aAAJ,CAAkB;IACpCG,MAAM,EAAEA;EAD4B,CAAlB,CAAtB;EAGA,MAAME,MAAM,GAAG,IAAIJ,SAAJ,CAAcG,aAAd,CAAf;;EAEA,IAAI;IACA,MAAME,UAAU,GAAG,MAAMD,MAAM,CAACE,gBAAP,CAAwB;MAC7CC,KAAK,EAAE;IADsC,CAAxB,CAAzB;IAGAC,OAAO,CAACC,GAAR,CAAY,WAAWJ,UAAU,CAACK,IAAX,CAAgBC,OAAhB,CAAwB,CAAxB,EAA2BC,IAAlD;EACH,CALD,CAKE,OAAOC,KAAP,EAAc;IACZL,OAAO,CAACC,GAAR,CAAY,OAAZ;IACA,OAAO,KAAP;EACH;;EACD,OAAO,IAAP;AACH;;AAED,eAAeK,cAAf,CAA8BZ,MAA9B,EAAsCa,QAAtC,EAAgD;EAC5C,MAAMZ,aAAa,GAAG,IAAIJ,aAAJ,CAAkB;IACpCG,MAAM,EAAEA;EAD4B,CAAlB,CAAtB;EAGA,MAAME,MAAM,GAAG,IAAIJ,SAAJ,CAAcG,aAAd,CAAf;;EAEA,IAAI;IACA,MAAME,UAAU,GAAG,MAAMD,MAAM,CAACE,gBAAP,CAAwB;MAC7CC,KAAK,EAAE,kBADsC;MAE7CS,MAAM,EAAE,gCAAgCD;IAFK,CAAxB,CAAzB;IAIA,OAAOV,UAAU,CAACK,IAAX,CAAgBC,OAAhB,CAAwB,CAAxB,EAA2BC,IAAlC;EACH,CAND,CAME,OAAOC,KAAP,EAAc;IACZ,IAAIA,KAAK,CAACI,QAAV,EAAoB;MAChBT,OAAO,CAACK,KAAR,CAAcA,KAAK,CAACI,QAAN,CAAeC,MAA7B;MACAV,OAAO,CAACK,KAAR,CAAcA,KAAK,CAACI,QAAN,CAAeP,IAA7B;IACH,CAHD,MAGO;MACHF,OAAO,CAACK,KAAR,CAAcA,KAAd;IACH;;IACD,OAAO,KAAP;EACH;AACJ;;AAED,SAASZ,cAAT,EAAyBa,cAAzB"},"metadata":{},"sourceType":"module"}